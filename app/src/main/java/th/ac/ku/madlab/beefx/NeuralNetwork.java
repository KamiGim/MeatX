package th.ac.ku.madlab.beefx;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Created by Kami on 4/23/2017.
 */

public class NeuralNetwork {
    double[] data;
    public NeuralNetwork(double[] data){
        this.data = data;
    }

    double[] getGrades(){
        double[] data = this.data;
        double[] x1Offset = {4.26,90.79,87.84,23.45,90.64,30.87,0,16.67,7.38,0};
        List<Double> tmp = new ArrayList<Double>();
        for (int i=0; i <data.length;i++) {
            tmp.add(data[i]-x1Offset[i]);
        }

        double[] x1Gain = {0.0837871805613741,0.0430015050526768,0.03613369467028,0.0472925041380941,0.0418935902806871,0.0170285227756492,0.0132196443915659,0.0371954621536173,0.0346140533056421,0.029944602485402};
        double ymin = -1;

        List<Double> xP1 = new ArrayList<Double>();
        for (int i=0; i <data.length;i++) {
            double t1 = tmp.get(i)*x1Gain[i]+ymin;
            tmp.set(i, t1);
            xP1.add(t1);
        }
        for (int i=0; i <data.length;i++) {
            //System.out.println(xP1.get(i));
        }
        double[][] IW1_1 = {{0.50047510540743523,-0.23075187240848577,0.32102000956352261,-0.63688312411997594,0.40651674947865835,-0.42940188771508597,0.79209986900182183,-0.66421319435921133,-0.73972490565491023,-0.17956592458668433},{-1.2505932283117105,-0.30037826978145027,0.73864355248538938,0.11856643814458193,0.24620870034727679,-0.81836929158456717,-0.42540746337386515,0.61900542866081487,0.18860941326659769,-0.83298792666275623},{0.27695818482290457,-1.175694765282727,-0.46465146364978382,-0.96023251192474912,0.0048992801390097731,-0.52527142164738672,-0.111682483010491,0.75557078367717634,0.78012198861493576,0.43211917639131314},{-0.5960265061985992,-0.50527815298131207,-0.11915827461708491,-0.4123056894017661,-0.50204657899968497,-0.75511397925776969,-1.0564389296961305,0.16407691209115766,-0.020901194861707752,-0.35269380172784121},{0.42685930470875133,0.47821314175230328,0.00056616425781493701,-0.90173205158365388,0.31939096927036081,0.91489268063041407,-0.30411805163723304,-0.75263979663196734,0.67054449747407663,0.28020427581508323},{0.77691467706662498,-0.32070668389579438,0.50748719144208432,0.76696857104018012,-0.38293311836909849,-0.48813544999425135,-0.77411088035970022,0.80531919042270661,0.23498957869972537,0.50830560258984547},{-0.31484194092417606,0.54134329893274191,0.46530211992550824,0.030469636194616095,-0.74622882718202999,-0.60035963064850495,0.42446184716474727,-0.51967148538797592,0.71394163999494231,-0.60492675610157609},{0.5977485157281317,-0.7574386107854264,-0.77534564593319844,-0.085979176620593512,-0.57193184984851297,-0.38086465933055669,0.56345133015169335,-0.41752175697988453,-0.36439060706047066,-0.77366824297612202},{0.56961547213248931,0.94950940860423472,-0.60337166827650524,0.59295693941380256,0.77993518411308416,-0.16358439007155995,0.49841306553851528,0.42787561115299949,0.84570695283821928,-0.15440915462662164},{0.31639796535727127,0.15291770390741763,-0.19408511658974187,-0.48463914794536733,-0.65229031648840985,-0.60776190741730085,-0.7266071517695426,-0.87756163293157585,0.033160275245124229,-0.07194193103769983}};

        for (int i=0; i <data.length;i++) {
            double temp = 0;
            for (int j=0; j <data.length;j++) {
                temp = temp + IW1_1[i][j]*xP1.get(j);
            }
            tmp.set(i, temp);
        }
        List<Double> a1 = new ArrayList<Double>();
        double[] b1 = {-1.6967080382225743,1.4706249569817305,0.59945960659097008,0.63025509023306936,-0.49562613723308013,0.09831520795549023,-0.77333098953846335,1.0694415363049705,1.1172988985353611,2.0978085629721974};
        for (int i=0; i <data.length;i++) {
            double t2 = 2 / (1 + Math.exp(-2*(tmp.get(i)+b1[i]))) - 1;
            tmp.set(i,t2);
            a1.add(t2);
        }
        List<Double> tmp2 = new ArrayList<Double>();
        double[][] LW2_1={{-0.27750858746544227,1.3103230276717672,-0.3787645193777458,0.66434601206874211,-0.38484089459597615,-0.44675776081385166,-0.48337437335282241,-0.98966806639725347,-0.23443904808562638,0.91116602189033358},{0.13349044918826614,1.3700851462014438,0.65964680741385218,-0.060039110055132433,-0.23540197794733417,-1.068362243743096,0.25743485546206002,0.40835957479725993,0.88111883852235007,1.1046107568857793},{0.32056639959512473,0.53232067391598792,-0.37263149163811915,0.45588320929589343,0.11094145998789642,0.63637172071980641,-0.22111699158663589,0.20522067539178313,-0.2354190988738088,-0.078885236952503685},{-0.49339328553740408,-1.0061649314988301,0.11144333225537305,0.75245054038497783,0.28294762205889923,-0.44179393659793492,-0.46978900850050542,-1.0071447737058272,0.071546962600637823,-0.11801601995479938},{-0.053386689709065349,-0.22237355902627787,-0.0016615509962418021,0.33986658636541761,0.53310839893301554,-0.38345805469161803,0.56945408620088878,-0.55849805596865942,0.29077508305266564,-1.4443665546102076},{-0.35672491291276898,-1.2037192530527103,0.12827583640034165,-0.88534697579237664,0.044490173112494785,0.12470629206594064,-0.87309245044866968,-0.73032533646151088,-0.39613619572818004,0.7945045026742299}};
        double[] b2 = {0.22969843976230686,0.059277314072047206,0.65232088364950558,-0.51638940224083985,-0.28768686122328629,-0.32914299351655263};
        for (int i=0; i < 6;i++) {
            double temp = 0;
            for (int j=0; j <data.length;j++) {
                temp = temp + LW2_1[i][j]*a1.get(j);
            }
            tmp2.add(temp+b2[i]);
        }
        double nmax = Collections.max(tmp2);

        double[] n = new double[tmp2.size()];
        double[]numerator = new double[tmp2.size()];
        for (int i=0; i <tmp2.size();i++) {
            n[i] = tmp2.get(i)-nmax;
            numerator[i] = Math.exp(n[i]);
        }

        double denominator = 0;

        for (int i=0; i <tmp2.size();i++) {
            denominator = denominator+numerator[i];
        }
        if (denominator == 0){
            denominator = 1;
        }

        double[] a2 = new double[tmp2.size()];
        for (int i=0; i <tmp2.size();i++) {
            a2[i] = numerator[i]/denominator;
        }

//        for (int i=0; i <tmp2.size();i++) {
//            System.out.println(a2[i]);
//        }
        return a2;
    }
}
